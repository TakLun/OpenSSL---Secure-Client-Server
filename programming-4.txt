Programming 4

Instructor: Guanhua Yan
Due date: May 7
Two days of grace period (May 9)

As we discussed in the lectures, SSL/TLS are crucial to the success of e-business on the current Internet. In our 4th programming project, we will learn how to use SSL/TLS for secure connections. In this assignment, the first step is to establish a secure connection between a client and a server, using the OpenSSL library again (I assume that you have already known how to use the library from the 2nd programming assignment). To make your task easier, please use the code snippets in the attached PDF file for this step. You will need to use options "-lssl -lcrypto" when you compile your code.

Once a SSL connection has been established, the client and the server proceed as follows:

[1] Client --> Server: Prompt to ask the user to input a number X
[2] Server --> Client: X - 1. 
[3] Client --> Check whether the answer from the server is correct, and output the result. The client repeats step 1.

Please write two separate programs, one for client and the other for server. In the test case, we will replace your client program with ours to test your server implementation, and your server program with ours to test your client implementation.

The server needs the certificate file and the key file to start with. You can do that with the following command:

"openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days XXX",

where the options are explained as follows:

req
    PKCS#10 certificate request and certificate generating utility. (You may want to visit http://en.wikipedia.org/wiki/PKCS to understand what's PKCS#10.)

-x509
    this option outputs a self signed certificate instead of a certificate request. This is typically used to generate a test certificate or a self signed root CA.

-newkey arg
    this option creates a new certificate request and a new private key. The argument takes one of several forms. rsa:nbits, where nbits is the number of bits, generates an RSA key nbits in size.

-keyout filename
    this gives the filename to write the newly created private key to.

-out filename
    This specifies the output filename to write to or standard output by default.

-days n
    when the -x509 option is being used this specifies the number of days to certify the certificate for. The default is 30 days.



